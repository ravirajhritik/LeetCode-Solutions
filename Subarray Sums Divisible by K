https://leetcode.com/problems/subarray-sums-divisible-by-k/

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n=nums.size();
        unordered_map<int,int>mp;
        mp[0]=1;
        int count=0;
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            int rem=sum%k;
             if(rem<0){
                 rem=rem+k;
             }
            //if thet rem is already present in that map then we are adding the frequency of that rem to the count
            count=count+mp[rem];
            //incrementing the frequency of that rem 
            mp[rem]++;
        }
        return count;
    }
};
